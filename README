ARM Cortex M0 emulator for DOS

Register contents on reset:

R0:  program image base address
R1:  memory size
SP: value taken from the vector table
PC: value taken from the vector table

Ctrl+Break sends an NMI (not implemented yet)

# Memory map

    0x00000000 -- 0x000fffff	program image (adj. to load addr)
    0x20000000 -- 0x200fffff	host memory (unadjusted)
    0x40000000 -- 0x400fffff	8086 IO address space
    0xe0000000 -- 0xe00fffff    emulated PPB
    0xf0000000 -- 0xf00fffff    emulator escape hatches

The Cortex M0 program image is loaded right after 256 bytes of
emulator stack space and extends all the way to the end of the program.
Address translation is performed by the emulator such that emulated
addresses 0x00000000 seen by ARM code corresponds to the load address
of the program.

# Escape hatches:

TODO: Perhaps change this to some magic addresses in the region
0xf0000000 -- 0xffffffff?

The SVC instruction with operands in the range #0x80 to #0x8f is
reserved to perform special functions.

    BKPT #0xf0

Perform a host software interrupt.  On entry, the 8086 registers are
set up as described below.  On exit from the interrupt handler, the
8086 register values are copied into the ARM registers.

    R0: AX
    R1: CX
    R2: DX
    R3: BX
    R4: SP (exit only)
    R5: BP
    R6: SI
    R7: DI
    R8: ES
    R9: interrupt number
    R10: SS (exit only)
    R11: DS
    R12: flags (exit only)
    SP: unchanged
    LR: unchanged
    PC: advanced past the SVC instruction

The software interrupt is executed on the host stack; the value given
for SS:SP is ignored.  The arithmetic flags (NZCV) are translated into
x86 flags on entry to the software interrupt.  On exit, the flags are
translated back into NZCV and also saved into R12.

    BKPT #0xf1

Perform a far call into native code.  The behaviour is the same as for
BKPT #0xf0, except R9 is taken to contain a far pointer (segment/offset)
to the function you want to call.  The function is called on the host
stack.

    BKPT #0xf2 (like BKPT #0xf0)
    BKPT #0xf3 (like BKPT #0xf1)

Perform software interrupts/far calls on the emulated stack.  The
register usage is as above, except that SS:SP is taken from R10 and R4.

    BKPT #0xff

Terminate the emulation and return to the host.
